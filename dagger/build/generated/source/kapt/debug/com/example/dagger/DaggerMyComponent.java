// Generated by Dagger (https://dagger.dev).
package com.example.dagger;

import android.content.Context;
import android.content.SharedPreferences;
import androidx.lifecycle.ViewModel;
import com.example.dagger.dataModule.Data;
import com.example.dagger.dataModule.Data_Factory;
import com.example.dagger.dataModule.MyViewModel;
import com.example.dagger.dataModule.MyViewModel_Factory;
import com.example.dagger.dataModule.ViewModelFactory;
import com.example.dagger.dataModule.ViewModelFactory_Factory;
import com.example.dagger.room.UserDao;
import com.example.dagger.room.UserRepository;
import com.example.dagger.sqlite.DbHelper;
import com.example.dagger.userList.UsersViewModel;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerMyComponent implements MyComponent {
  private final ContextModule contextModule;

  private Provider<Context> provideContextProvider;

  private DaggerMyComponent(ContextModule contextModuleParam) {
    this.contextModule = contextModuleParam;
    initialize(contextModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  private SharedPreferences sharedPreferences() {
    return ContextModule_ProvideSharedPreferencesFactory.provideSharedPreferences(contextModule, ContextModule_ProvideContextFactory.provideContext(contextModule));
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ContextModule contextModuleParam) {
    this.provideContextProvider = ContextModule_ProvideContextFactory.create(contextModuleParam);
  }

  @Override
  public MySubComponentFactory.Factory getMySubComponentFactory() {
    return new MySubComponentFactoryFactory();
  }

  public static final class Builder {
    private ContextModule contextModule;

    private Builder() {
    }

    public Builder contextModule(ContextModule contextModule) {
      this.contextModule = Preconditions.checkNotNull(contextModule);
      return this;
    }

    public MyComponent build() {
      Preconditions.checkBuilderRequirement(contextModule, ContextModule.class);
      return new DaggerMyComponent(contextModule);
    }
  }

  private final class MySubComponentFactoryFactory implements MySubComponentFactory.Factory {
    @Override
    public MySubComponentFactory create(String name) {
      Preconditions.checkNotNull(name);
      return new MySubComponentFactoryImpl(new MyModule(), name);
    }
  }

  private final class MySubComponentFactoryImpl implements MySubComponentFactory {
    private final MyModule myModule;

    private final String name;

    private Provider<Car3> provideCar3Provider;

    private Provider<String> nameProvider;

    private Provider<Car4> provideCar4Provider;

    private Provider<Data> dataProvider;

    private Provider<MyViewModel> myViewModelProvider;

    private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

    private Provider<ViewModelFactory> viewModelFactoryProvider;

    private Provider<UserDao> provideUserDaoProvider;

    private Provider<UserRepository> provideUserRepositoryProvider;

    private Provider<UsersViewModel> provideUsersViewModelProvider;

    private MySubComponentFactoryImpl(MyModule myModuleParam, String nameParam) {
      this.myModule = myModuleParam;
      this.name = nameParam;
      initialize(myModuleParam, nameParam);
    }

    private Car1 car1() {
      return new Car1(name);
    }

    private MySharedPreferences mySharedPreferences() {
      return new MySharedPreferences(DaggerMyComponent.this.sharedPreferences());
    }

    private DbHelper dbHelper() {
      return new DbHelper(ContextModule_ProvideContextFactory.provideContext(DaggerMyComponent.this.contextModule), ContextModule_ProvideDatabaseNameFactory.provideDatabaseName(DaggerMyComponent.this.contextModule), DaggerMyComponent.this.contextModule.provideDatabaseVersion());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MyModule myModuleParam, final String nameParam) {
      this.provideCar3Provider = DoubleCheck.provider(MyModule_ProvideCar3Factory.create(myModuleParam));
      this.nameProvider = InstanceFactory.create(nameParam);
      this.provideCar4Provider = DoubleCheck.provider(MyModule_ProvideCar4Factory.create(myModuleParam, nameProvider));
      this.dataProvider = DoubleCheck.provider(Data_Factory.create());
      this.myViewModelProvider = MyViewModel_Factory.create(dataProvider);
      this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(1).put(MyViewModel.class, (Provider) myViewModelProvider).build();
      this.viewModelFactoryProvider = DoubleCheck.provider(ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
      this.provideUserDaoProvider = DoubleCheck.provider(MyModule_ProvideUserDaoFactory.create(myModuleParam, DaggerMyComponent.this.provideContextProvider));
      this.provideUserRepositoryProvider = DoubleCheck.provider(MyModule_ProvideUserRepositoryFactory.create(myModuleParam, provideUserDaoProvider));
      this.provideUsersViewModelProvider = DoubleCheck.provider(MyModule_ProvideUsersViewModelFactory.create(myModuleParam, provideUserRepositoryProvider));
    }

    @Override
    public void inject(MainActivity target) {
      injectMainActivity(target);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectConstant_str(instance, MyModule_ProvideConstantStrStringFactory.provideConstantStrString(myModule));
      MainActivity_MembersInjector.injectCar1(instance, car1());
      MainActivity_MembersInjector.injectCar2(instance, new Car2());
      MainActivity_MembersInjector.injectCar3(instance, provideCar3Provider.get());
      MainActivity_MembersInjector.injectCar4(instance, provideCar4Provider.get());
      MainActivity_MembersInjector.injectMySharedPreferences(instance, mySharedPreferences());
      MainActivity_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
      MainActivity_MembersInjector.injectDbHelper(instance, dbHelper());
      MainActivity_MembersInjector.injectUsersViewModel(instance, provideUsersViewModelProvider.get());
      MainActivity_MembersInjector.injectUserDao(instance, provideUserDaoProvider.get());
      MainActivity_MembersInjector.injectRepository(instance, provideUserRepositoryProvider.get());
      return instance;
    }
  }
}
