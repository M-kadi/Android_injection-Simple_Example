// Generated by Dagger (https://dagger.dev).
package com.example.dagger;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MyModule_ProvideCar4Factory implements Factory<Car4> {
  private final MyModule module;

  private final Provider<String> nameProvider;

  public MyModule_ProvideCar4Factory(MyModule module, Provider<String> nameProvider) {
    this.module = module;
    this.nameProvider = nameProvider;
  }

  @Override
  public Car4 get() {
    return provideCar4(module, nameProvider.get());
  }

  public static MyModule_ProvideCar4Factory create(MyModule module, Provider<String> nameProvider) {
    return new MyModule_ProvideCar4Factory(module, nameProvider);
  }

  public static Car4 provideCar4(MyModule instance, String name) {
    return Preconditions.checkNotNullFromProvides(instance.provideCar4(name));
  }
}
