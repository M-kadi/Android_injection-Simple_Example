// Generated by Dagger (https://dagger.dev).
package com.example.hilt;

import android.app.Activity;
import android.app.Service;
import android.content.SharedPreferences;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.hilt.lifecycle.ViewModelAssistedFactory;
import androidx.hilt.lifecycle.ViewModelFactoryModules_ActivityModule_ProvideFactoryFactory;
import androidx.hilt.lifecycle.ViewModelFactoryModules_FragmentModule_ProvideFactoryFactory;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import androidx.lifecycle.ViewModelProvider;
import com.example.hilt.dataModule.Data;
import com.example.hilt.dataModule.MyViewModel_AssistedFactory;
import com.example.hilt.dataModule.MyViewModel_AssistedFactory_Factory;
import com.example.hilt.room.UserDao;
import com.example.hilt.room.UserRepository;
import com.example.hilt.sqlite.DbHelper;
import com.example.hilt.userList.UsersViewModel_AssistedFactory;
import com.example.hilt.userList.UsersViewModel_AssistedFactory_Factory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerMyApp_HiltComponents_SingletonC extends MyApp_HiltComponents.SingletonC {
  private final MyModule myModule;

  private final ApplicationContextModule applicationContextModule;

  private volatile Object dbHelper = new MemoizedSentinel();

  private volatile Object car3 = new MemoizedSentinel();

  private volatile Object sharedPreferences = new MemoizedSentinel();

  private volatile Object userDao = new MemoizedSentinel();

  private volatile Object userRepository = new MemoizedSentinel();

  private volatile Object data = new MemoizedSentinel();

  private volatile Provider<Data> dataProvider;

  private volatile Provider<UserRepository> provideUserRepositoryProvider;

  private DaggerMyApp_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam, MyModule myModuleParam) {
    this.myModule = myModuleParam;
    this.applicationContextModule = applicationContextModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private DbHelper dbHelper() {
    Object local = dbHelper;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = dbHelper;
        if (local instanceof MemoizedSentinel) {
          local = MyModule_ProvideDbHelperFactory.provideDbHelper(myModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          dbHelper = DoubleCheck.reentrantCheck(dbHelper, local);
        }
      }
    }
    return (DbHelper) local;
  }

  private Car3 car3() {
    Object local = car3;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = car3;
        if (local instanceof MemoizedSentinel) {
          local = MyModule_ProvideCar3Factory.provideCar3(myModule);
          car3 = DoubleCheck.reentrantCheck(car3, local);
        }
      }
    }
    return (Car3) local;
  }

  private SharedPreferences sharedPreferences() {
    Object local = sharedPreferences;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = sharedPreferences;
        if (local instanceof MemoizedSentinel) {
          local = MyModule_ProvideSharedPreferencesFactory.provideSharedPreferences(myModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          sharedPreferences = DoubleCheck.reentrantCheck(sharedPreferences, local);
        }
      }
    }
    return (SharedPreferences) local;
  }

  private UserDao userDao() {
    Object local = userDao;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = userDao;
        if (local instanceof MemoizedSentinel) {
          local = MyModule_ProvideUserDaoFactory.provideUserDao(myModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          userDao = DoubleCheck.reentrantCheck(userDao, local);
        }
      }
    }
    return (UserDao) local;
  }

  private UserRepository userRepository() {
    Object local = userRepository;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = userRepository;
        if (local instanceof MemoizedSentinel) {
          local = MyModule_ProvideUserRepositoryFactory.provideUserRepository(myModule, userDao());
          userRepository = DoubleCheck.reentrantCheck(userRepository, local);
        }
      }
    }
    return (UserRepository) local;
  }

  private Data data() {
    Object local = data;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = data;
        if (local instanceof MemoizedSentinel) {
          local = new Data();
          data = DoubleCheck.reentrantCheck(data, local);
        }
      }
    }
    return (Data) local;
  }

  private Provider<Data> dataProvider() {
    Object local = dataProvider;
    if (local == null) {
      local = new SwitchingProvider<>(0);
      dataProvider = (Provider<Data>) local;
    }
    return (Provider<Data>) local;
  }

  private Provider<UserRepository> userRepositoryProvider() {
    Object local = provideUserRepositoryProvider;
    if (local == null) {
      local = new SwitchingProvider<>(1);
      provideUserRepositoryProvider = (Provider<UserRepository>) local;
    }
    return (Provider<UserRepository>) local;
  }

  @Override
  public void injectMyApp(MyApp myApp) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder();
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private MyModule myModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public Builder myModule(MyModule myModule) {
      this.myModule = Preconditions.checkNotNull(myModule);
      return this;
    }

    public MyApp_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (myModule == null) {
        this.myModule = new MyModule();
      }
      return new DaggerMyApp_HiltComponents_SingletonC(applicationContextModule, myModule);
    }
  }

  private final class ActivityRetainedCBuilder implements MyApp_HiltComponents.ActivityRetainedC.Builder {
    @Override
    public MyApp_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl();
    }
  }

  private final class ActivityRetainedCImpl extends MyApp_HiltComponents.ActivityRetainedC {
    private volatile Object lifecycle = new MemoizedSentinel();

    private ActivityRetainedCImpl() {

    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder();
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private final class ActivityCBuilder implements MyApp_HiltComponents.ActivityC.Builder {
      private Activity activity;

      @Override
      public ActivityCBuilder activity(Activity activity) {
        this.activity = Preconditions.checkNotNull(activity);
        return this;
      }

      @Override
      public MyApp_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(activity);
      }
    }

    private final class ActivityCImpl extends MyApp_HiltComponents.ActivityC {
      private final Activity activity;

      private volatile Provider<MyViewModel_AssistedFactory> myViewModel_AssistedFactoryProvider;

      private volatile Provider<UsersViewModel_AssistedFactory> usersViewModel_AssistedFactoryProvider;

      private ActivityCImpl(Activity activityParam) {
        this.activity = activityParam;
      }

      private MySharedPreferences mySharedPreferences() {
        return new MySharedPreferences(DaggerMyApp_HiltComponents_SingletonC.this.sharedPreferences());
      }

      private MyViewModel_AssistedFactory myViewModel_AssistedFactory() {
        return MyViewModel_AssistedFactory_Factory.newInstance(DaggerMyApp_HiltComponents_SingletonC.this.dataProvider());
      }

      private Provider<MyViewModel_AssistedFactory> myViewModel_AssistedFactoryProvider() {
        Object local = myViewModel_AssistedFactoryProvider;
        if (local == null) {
          local = new SwitchingProvider<>(0);
          myViewModel_AssistedFactoryProvider = (Provider<MyViewModel_AssistedFactory>) local;
        }
        return (Provider<MyViewModel_AssistedFactory>) local;
      }

      private UsersViewModel_AssistedFactory usersViewModel_AssistedFactory() {
        return UsersViewModel_AssistedFactory_Factory.newInstance(DaggerMyApp_HiltComponents_SingletonC.this.userRepositoryProvider());
      }

      private Provider<UsersViewModel_AssistedFactory> usersViewModel_AssistedFactoryProvider() {
        Object local = usersViewModel_AssistedFactoryProvider;
        if (local == null) {
          local = new SwitchingProvider<>(1);
          usersViewModel_AssistedFactoryProvider = (Provider<UsersViewModel_AssistedFactory>) local;
        }
        return (Provider<UsersViewModel_AssistedFactory>) local;
      }

      private Map<String, Provider<ViewModelAssistedFactory<? extends ViewModel>>> mapOfStringAndProviderOfViewModelAssistedFactoryOf(
          ) {
        return MapBuilder.<String, Provider<ViewModelAssistedFactory<? extends ViewModel>>>newMapBuilder(2).put("com.example.hilt.dataModule.MyViewModel", (Provider) myViewModel_AssistedFactoryProvider()).put("com.example.hilt.userList.UsersViewModel", (Provider) usersViewModel_AssistedFactoryProvider()).build();
      }

      private ViewModelProvider.Factory provideFactory() {
        return ViewModelFactoryModules_ActivityModule_ProvideFactoryFactory.provideFactory(activity, ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerMyApp_HiltComponents_SingletonC.this.applicationContextModule), mapOfStringAndProviderOfViewModelAssistedFactoryOf());
      }

      private Set<ViewModelProvider.Factory> defaultActivityViewModelFactorySetOfViewModelProviderFactory(
          ) {
        return Collections.<ViewModelProvider.Factory>singleton(provideFactory());
      }

      @Override
      public void injectMainActivity(MainActivity mainActivity) {
        injectMainActivity2(mainActivity);
      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerMyApp_HiltComponents_SingletonC.this.applicationContextModule), Collections.<String>emptySet(), new ViewModelCBuilder(), defaultActivityViewModelFactorySetOfViewModelProviderFactory(), Collections.<ViewModelProvider.Factory>emptySet());
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder();
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder();
      }

      private MainActivity injectMainActivity2(MainActivity instance) {
        MainActivity_MembersInjector.injectConstant_str(instance, MyModule_ProvideConstantStrStringFactory.provideConstantStrString(DaggerMyApp_HiltComponents_SingletonC.this.myModule));
        MainActivity_MembersInjector.injectDbHelper(instance, DaggerMyApp_HiltComponents_SingletonC.this.dbHelper());
        MainActivity_MembersInjector.injectCar2(instance, new Car2());
        MainActivity_MembersInjector.injectCar3(instance, DaggerMyApp_HiltComponents_SingletonC.this.car3());
        MainActivity_MembersInjector.injectMySharedPreferences(instance, mySharedPreferences());
        MainActivity_MembersInjector.injectUserDao(instance, DaggerMyApp_HiltComponents_SingletonC.this.userDao());
        MainActivity_MembersInjector.injectRepository(instance, DaggerMyApp_HiltComponents_SingletonC.this.userRepository());
        return instance;
      }

      private final class FragmentCBuilder implements MyApp_HiltComponents.FragmentC.Builder {
        private Fragment fragment;

        @Override
        public FragmentCBuilder fragment(Fragment fragment) {
          this.fragment = Preconditions.checkNotNull(fragment);
          return this;
        }

        @Override
        public MyApp_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCImpl(fragment);
        }
      }

      private final class FragmentCImpl extends MyApp_HiltComponents.FragmentC {
        private final Fragment fragment;

        private FragmentCImpl(Fragment fragmentParam) {
          this.fragment = fragmentParam;
        }

        private ViewModelProvider.Factory provideFactory() {
          return ViewModelFactoryModules_FragmentModule_ProvideFactoryFactory.provideFactory(fragment, ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerMyApp_HiltComponents_SingletonC.this.applicationContextModule), ActivityCImpl.this.mapOfStringAndProviderOfViewModelAssistedFactoryOf());
        }

        private Set<ViewModelProvider.Factory> defaultFragmentViewModelFactorySetOfViewModelProviderFactory(
            ) {
          return Collections.<ViewModelProvider.Factory>singleton(provideFactory());
        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerMyApp_HiltComponents_SingletonC.this.applicationContextModule), Collections.<String>emptySet(), new ViewModelCBuilder(), ActivityCImpl.this.defaultActivityViewModelFactorySetOfViewModelProviderFactory(), defaultFragmentViewModelFactorySetOfViewModelProviderFactory());
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder();
        }

        private final class ViewWithFragmentCBuilder implements MyApp_HiltComponents.ViewWithFragmentC.Builder {
          private View view;

          @Override
          public ViewWithFragmentCBuilder view(View view) {
            this.view = Preconditions.checkNotNull(view);
            return this;
          }

          @Override
          public MyApp_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCImpl(view);
          }
        }

        private final class ViewWithFragmentCImpl extends MyApp_HiltComponents.ViewWithFragmentC {
          private ViewWithFragmentCImpl(View view) {

          }
        }
      }

      private final class ViewCBuilder implements MyApp_HiltComponents.ViewC.Builder {
        private View view;

        @Override
        public ViewCBuilder view(View view) {
          this.view = Preconditions.checkNotNull(view);
          return this;
        }

        @Override
        public MyApp_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCImpl(view);
        }
      }

      private final class ViewCImpl extends MyApp_HiltComponents.ViewC {
        private ViewCImpl(View view) {

        }
      }

      private final class SwitchingProvider<T> implements Provider<T> {
        private final int id;

        SwitchingProvider(int id) {
          this.id = id;
        }

        @SuppressWarnings("unchecked")
        @Override
        public T get() {
          switch (id) {
            case 0: // com.example.hilt.dataModule.MyViewModel_AssistedFactory 
            return (T) ActivityCImpl.this.myViewModel_AssistedFactory();

            case 1: // com.example.hilt.userList.UsersViewModel_AssistedFactory 
            return (T) ActivityCImpl.this.usersViewModel_AssistedFactory();

            default: throw new AssertionError(id);
          }
        }
      }
    }

    private final class ViewModelCBuilder implements MyApp_HiltComponents.ViewModelC.Builder {
      private SavedStateHandle savedStateHandle;

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
        this.savedStateHandle = Preconditions.checkNotNull(handle);
        return this;
      }

      @Override
      public MyApp_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(savedStateHandle);
      }
    }

    private final class ViewModelCImpl extends MyApp_HiltComponents.ViewModelC {
      private ViewModelCImpl(SavedStateHandle savedStateHandle) {

      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return Collections.<String, Provider<ViewModel>>emptyMap();
      }
    }
  }

  private final class ServiceCBuilder implements MyApp_HiltComponents.ServiceC.Builder {
    private Service service;

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public MyApp_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(service);
    }
  }

  private final class ServiceCImpl extends MyApp_HiltComponents.ServiceC {
    private ServiceCImpl(Service service) {

    }
  }

  private final class SwitchingProvider<T> implements Provider<T> {
    private final int id;

    SwitchingProvider(int id) {
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // com.example.hilt.dataModule.Data 
        return (T) DaggerMyApp_HiltComponents_SingletonC.this.data();

        case 1: // com.example.hilt.room.UserRepository 
        return (T) DaggerMyApp_HiltComponents_SingletonC.this.userRepository();

        default: throw new AssertionError(id);
      }
    }
  }
}
