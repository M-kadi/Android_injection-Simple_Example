// Generated by Dagger (https://dagger.dev).
package com.example.hilt;

import com.example.hilt.room.UserDao;
import com.example.hilt.room.UserRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MyModule_ProvideUserRepositoryFactory implements Factory<UserRepository> {
  private final MyModule module;

  private final Provider<UserDao> userDaoProvider;

  public MyModule_ProvideUserRepositoryFactory(MyModule module, Provider<UserDao> userDaoProvider) {
    this.module = module;
    this.userDaoProvider = userDaoProvider;
  }

  @Override
  public UserRepository get() {
    return provideUserRepository(module, userDaoProvider.get());
  }

  public static MyModule_ProvideUserRepositoryFactory create(MyModule module,
      Provider<UserDao> userDaoProvider) {
    return new MyModule_ProvideUserRepositoryFactory(module, userDaoProvider);
  }

  public static UserRepository provideUserRepository(MyModule instance, UserDao userDao) {
    return Preconditions.checkNotNullFromProvides(instance.provideUserRepository(userDao));
  }
}
